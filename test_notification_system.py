#!/usr/bin/env python3
"""
Comprehensive test script for the notification system
Tests both backend API and real-time functionality
"""

import requests
import json
import time
import sys

# Configuration
BASE_URL = "https://65.1.189.119"
API_BASE = f"{BASE_URL}/api/method"

def test_notification_api():
    """Test the notification API endpoints"""
    print("üîç Testing Notification API...")
    
    # Test 1: Get user notifications
    print("\n1. Testing get_user_notifications...")
    try:
        response = requests.get(f"{API_BASE}/gameplan.gameplan.api.notifications.get_user_notifications")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Success: Found {len(data.get('message', []))} notifications")
            return True
        else:
            print(f"   ‚ùå Failed: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def test_send_notification():
    """Test sending a notification"""
    print("\n2. Testing send_system_notification...")
    try:
        payload = {
            "title": "API Test Notification",
            "body": "This is a test notification sent via API",
            "recipient_user": "Administrator"
        }
        
        response = requests.post(
            f"{API_BASE}/gameplan.gameplan.api.notifications.send_system_notification",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            print("   ‚úÖ Success: Notification sent via API")
            return True
        else:
            print(f"   ‚ùå Failed: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def test_notification_hooks():
    """Test if notification hooks are working by creating a test task"""
    print("\n3. Testing notification hooks...")
    try:
        # This would require authentication and proper task creation
        # For now, we'll just check if the hooks are enabled
        print("   ‚ÑπÔ∏è  Notification hooks should be enabled in hooks.py")
        print("   ‚ÑπÔ∏è  Test by changing task status in the UI")
        return True
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def test_socket_connection():
    """Test Socket.IO connection"""
    print("\n4. Testing Socket.IO connection...")
    try:
        import socketio
        
        sio = socketio.Client()
        
        @sio.event
        def connect():
            print("   ‚úÖ Socket.IO connected successfully")
            sio.disconnect()
        
        @sio.event
        def disconnect():
            print("   ‚úÖ Socket.IO disconnected")
        
        @sio.event
        def new_notification(data):
            print(f"   ‚úÖ Received real-time notification: {data}")
        
        # Connect to the server
        sio.connect(f"{BASE_URL}")
        time.sleep(2)
        
        return True
    except ImportError:
        print("   ‚ö†Ô∏è  python-socketio not installed, skipping Socket.IO test")
        return True
    except Exception as e:
        print(f"   ‚ùå Socket.IO connection failed: {e}")
        return False

def test_browser_notifications():
    """Test browser notification functionality"""
    print("\n5. Testing Browser Notifications...")
    print("   ‚ÑπÔ∏è  Open the notification demo page in your browser:")
    print(f"   üì± {BASE_URL}/g/notification-demo")
    print("   ‚ÑπÔ∏è  Click 'Request Permission' and allow notifications")
    print("   ‚ÑπÔ∏è  Click 'Test Browser Popup' to test popup notifications")
    print("   ‚ÑπÔ∏è  Click 'Send Test Notification' to test full flow")
    return True

def main():
    """Run all tests"""
    print("üöÄ Starting Comprehensive Notification System Test")
    print("=" * 60)
    
    tests = [
        test_notification_api,
        test_send_notification,
        test_notification_hooks,
        test_socket_connection,
        test_browser_notifications
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        time.sleep(1)
    
    print("\n" + "=" * 60)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Notification system is working correctly.")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the output above for details.")
    
    print("\nüîß Manual Testing Steps:")
    print("1. Go to the notification demo page")
    print("2. Click 'Request Permission' and allow notifications")
    print("3. Click 'Test Browser Popup' - should show browser notification")
    print("4. Click 'Send Test Notification' - should show both popup and save to DB")
    print("5. Change a task status - should trigger real-time notification")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
